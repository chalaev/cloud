#+TITLE: Multi-scale code testing
#+AUTHOR: Oleg Shalaev
#+EMAIL:  oleg@chalaev.com

* Testing concept
For me code testing resembles testing an apple before deciding if I want to eat it.

1. First, we should perform microscopic tests, that is, find out if the concentration of dangerous atomic kernels (such as heavy metals or radioactive isotopes) is elevated.
   For software this means testing small independent blocks of software. For software (but not for apple) this is the simplest testing type; this is why it comes first.

2. The next ("mesoscopic") step would be to check if the apple is poisoned with dangerous chemical compounds.
   For software this means testing larger-scale blocks of code that involve interaction of elementary "microscopic" blocks that we have tested on previous step.

3. Finally, if our apple is not radioactive or toxic, we look on how it looks: does it actually look like a healthy apple should?
   For example, does it have spherical form and appropriate color?
   For software this means testing behavior of the entire system and answering questions like "does it install flawlessly?"
   I will call this kind of tests "macroscopic".

All kinds of tests are equally important: sometimes an open-source program is reliable, but user-unfriendly;
or proprietary software may have fancy design but contain back doors.

Microscopic tests are written in [[file:tests/tests/micro.el][micro.el]],
mesoscopic ones – in [[file:generated/tests/meso.el][meso.el]], and
macroscopic ones can be found in [[file:generated/tests/macro.el][macro.el]].

* Helper code
We will define =ert/on-success= in test macros for cleaning up.
Cleaning up when the test is passed:
#+BEGIN_SRC emacs-lisp :tangle tests/ert.el :shebang ";; ert.el"
(defun ert/on-success()
  "cleaning temporary directories"
  (ifn root-test-dir (clog :error "root-test-dir unset in ert/on-success")
    (if(string= root-test-dir (file-name-as-directory(getenv "HOME"))) (clog :error "WTF? Home directory is used in the test!")
#+END_SRC
← a necessary precaution.
#+BEGIN_SRC emacs-lisp :tangle tests/ert.el
    (clog :info "erasing %s" root-test-dir)
    (delete-directory root-test-dir t))))
(defun ert/when-passed()
  (when(functionp 'ert/on-success) (funcall #'ert/on-success)))
(add-function :before (symbol-function 'ert-pass) #'ert/when-passed)
#+END_SRC

* Preparing test environment
For testing we need to use some kind of poor man's "virtual environment":
- all test-related files are localized to =root-test-dir= which is erased in case when all tests are successful
- host is defined via variables in =environment= macro which is going to be overwritten in debug session

#+BEGIN_SRC emacs-lisp :tangle tests/prepare.el :shebang ";; prepare.el"
(require 'shalaev)
(defvar root-test-dir (file-name-as-directory(make-temp-file "cloud.test." t)) "root directory for all tests")
#+END_SRC
Now let us create two virtual hosts named "hostA" and "hostB":
#+BEGIN_SRC emacs-lisp :tangle tests/prepare.el
(let(
(hostnames '("hostA" "hostB")); values of the localhost variable
(remote-directory (need-dir root-test-dir "mnt/remote")); remote directory is mounted differently on different hosts
(remote/files "AbC")
(password "12345"))
(write-conf(untilde (FN debug-make-dir "tests" "common.conf"))
 (make-conf root-test-dir hostnames remote-directory remote/files password))
#+END_SRC
← creates =tests.conf= file in the [[file:tests][test directory]].

Each host has a set of parameters:
#+BEGIN_SRC emacs-lisp :tangle tests/prepare.el
(dolist(localhost hostnames)
(let*((signature localhost); [was (rand-str 3)] distinguishes files having the same name, but residing on different hosts
(s(format "
%s
" signature))
(configured "yes")
(~ (need-dir root-test-dir localhost))
(emacs-d (tilde(need-dir ~ ".emacs.d")))
(*config-directory* (tilde(need-dir emacs-d "conf"))); overwrites the definition in ~/.emacs.d/local-packages/shalaev.el
(local-dir (need-dir *config-directory* "cloud"))
(local/host/conf (concat local-dir localhost ".conf"))
(dot-dir (tilde(need-dir ~ (concat ".config-dir." signature)))); an example of hidden directory – all files inside =dot-dir= are blacklisted
(dir-1   (tilde(need-dir ~ (concat "dir-1." signature))))
(dir-1a  (tilde(need-dir ~ "dir-1a")))
(dot-file  (tilde(echo-to-file (concat "~/.bash-config." signature) (concat "(blacklisted) dot-file" s))))
(conf-file (tilde(echo-to-file (concat dot-dir "file." signature) "any non-whitelisted file inside blacklisted directory is blacklisted")))
(tmp-file  (tilde(echo-to-file (concat "~/tmp-1." signature) "blacklisted")))
(file-1    (tilde(echo-to-file (concat "~/file-1." signature) (concat "an ordinary file (missing on another host)" s))))
(file-1a   (tilde(echo-to-file "~/file-1a.dat" (concat "an ordinary file; there is a file with the same name (but different content) on another host)" s))))
(file-2 (tilde(echo-to-file (concat  "~/tmp-2." signature) (concat "blacklisted " signature)))); blacklisted
(black-root-dirs(mapcar #'(lambda(DN)(concat root-test-dir signature DN)) (split-string "/mnt/ /tmp/ /etc/ /ssh:")))
(black-matches (split-string "tmp /old /log /Downloads /.git/")); the same for both hosts
(black-extensions (split-string "aux idx ilg ind bak bbl blg brf bst dvi log out ps wav")))
#+END_SRC

For each host we create config-files.
Defining the host:
#+BEGIN_SRC emacs-lisp :tangle tests/prepare.el
(write-conf (untilde (FN root-test-dir (concat localhost ".conf")))
  (make-conf localhost ~ emacs-d *config-directory* local-dir local/host/conf dot-dir dir-1 dir-1a dot-file conf-file tmp-file file-1 file-1a file-2))
#+END_SRC
Defining parameters read by [[file:packaged/cloud.el][cloud.el]]:
#+BEGIN_SRC emacs-lisp :tangle tests/prepare.el
(write-conf (untilde local/host/conf)
  (make-conf configured remote-directory remote/files password)))))
#+END_SRC
← these =.conf= files will be loaded inside =(defun hostA() …)= defining =let-conf= environment that wraps [[file:generated/main.el][main.el]].

* Setup (load) test environment
[[file:tests/common.el][tests/common.el]] is used in all tests and is loaded the first:
#+BEGIN_SRC emacs-lisp :tangle tests/common.el :shebang ";; -*-  lexical-binding: t; -*-"

;; common.el – *first* file to be loaded
;; (require 'shalaev)

(require 'el-debug); debug-make-dir must be defined in Makefile
(load(FN debug-make-dir "tests" "ert.el")); debug-make-dir must be defined in Makefile

(if(and(boundp 'debug-make-dir) debug-make-dir)
  (setf debug-make-dir(file-name-as-directory debug-make-dir))
  (clog :error "debug-make-dir is either undefined or nil"))
#+END_SRC

Let us read configuration files prepared in [[file:tests/prepare.el][prepare.el]] only once and store them in global variables:
#+BEGIN_SRC emacs-lisp :tangle tests/common.el
(defvar debug-main-conf (read-conf-file (FN debug-make-dir "tests" "common.conf")) "prepared in tests/prepare.el")
(defvar root-test-dir nil "temporary directory for all virtual hosts")
(debug-set debug-main-conf root-test-dir)

(defmacro debug-environment(&rest body)
"sets most common variables"
`(letc debug-main-conf; global test configuration (common for all hosts)
(remote-directory remote/files password root-test-dir ((:string) hostnames))
(clean-RD remote-directory)
,@body))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle tests/common.el
(defvar debug-host-confs
  (mapcar #'(lambda(HN)(cons HN (read-conf-file (FN root-test-dir (concat HN ".conf")))))
    (letc debug-main-conf (((:string) hostnames)) hostnames)))
#+END_SRC
The following =defvar= is a subtle issue:
#+BEGIN_SRC emacs-lisp :tangle tests/common.el
(defvar debug-host-conf nil "this global definition needed for loaded main file"); 
(defmacro host>(HN &rest body); HN = "host name"
"to be called inside debug-environment"
`(ifn-let((debug-host-conf(cdr(assoc ,HN debug-host-confs))))
(clog :error "host %s is unconfigured" ,HN)
(load(FN debug-make-dir "tests" "cloud.el")); ← loading main file
(letc debug-host-conf (localhost ~ emacs-d *config-directory* local-dir local/host/conf dot-dir dir-1 dir-1a dot-file conf-file tmp-file file-1 file-1a file-2)
,@body
(clog :debug "leaving %s with these files in %s:
%s" ,HN remote-directory (together(directory-files remote-directory nil))))))

(defmacro debug-set*(&rest var-names)
`(debug-set (append debug-main-conf debug-host-conf) ,@var-names))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle tests/common.el
(defmacro clean-RD(dir)
"cleans remote directory by deleting and re-creating it"
`(ifn(string-prefix-p "/tmp/" ,dir) (clog :error "test cloud-init> remote-directory= %s must be inside tmp!" remote-directory)
(delete-directory ,dir t)
(need-dir ,dir)))
#+END_SRC

* Testing on different scales
** Micro scale
Locally redefining =make-temp-file= to eliminate randomness:
#+BEGIN_SRC emacs-lisp :tangle tests/micro.el  :shebang ";; -*-  lexical-binding: t; -*-"
;; tests/micro.el
(mapcar #'(lambda(FN)(load(FN debug-make-dir "tests" FN))) (split-string "common.el"))

(defun make-temp-file (FN &optional dir-flag suffix text)
"locally redefining standard function"
 (concat "/tmp/" FN "bZIZVA"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle tests/micro.el
(ert-deftest enc-make-stanza()
(skip-unless (eql system-type 'gnu/linux))
;; (setf lexical-binding t) ← does not help
(debug-environment (host> (car hostnames)
(let((general-FR ["~/pam.d/xscreensaver" "shalaev" "shalaev" (24506 18567 0 0) 41 416 "qwe"]); +
     (gzipped ["~/shalaev.1.obsolete.gz" "shalaev" "shalaev" (21621 47298 0 0) 41 416 "4R6" ])
     (encrypted ["~/big-secret.gpg" "shalaev" "shalaev" (21621 47298 0 0) 41 416  "sDF"])
     (image ["~/photo.jpeg" "shalaev" "shalaev" (21621 47298 0 0) 41 416 "rd2"]))
#+END_SRC
For non-special files:
#+BEGIN_SRC emacs-lisp :tangle tests/micro.el
(should (string= (enc-make-stanza general-FR)
"
$(cloud)qwe.gpg: $(HD)pam.d/xscreensaver
\t@$(enc) $@ $<
\t-@echo \"$$(date): uploaded $<\" >> $(localLog)
"))
#+END_SRC

Gzipped filles will be gunzipped before encoding:
#+BEGIN_SRC emacs-lisp :tangle tests/micro.el
(should (string= (enc-make-stanza gzipped)
"
/tmp/emacs-cloud.bZIZVA: $(HD)shalaev.1.obsolete.gz
	zcat $< > $@

$(cloud)4R6.gpg: /tmp/emacs-cloud.bZIZVA
\t@$(enc) $@ $<
	rm $<
\t-@echo \"$$(date): uploaded $<\" >> $(localLog)
"))
#+END_SRC

Encrypted files will be just copied to the cloud without additional encryption:
#+BEGIN_SRC emacs-lisp :tangle tests/micro.el
(should (string= (enc-make-stanza encrypted)
"
$(cloud)sDF.gpg: $(HD)big-secret.gpg
\tcp $< $@
\t-@echo \"$$(date): uploaded $<\" >> $(localLog)
"))
#+END_SRC

For images:
#+BEGIN_SRC emacs-lisp :tangle tests/micro.el
(should (string= (enc-make-stanza image)
"
$(cloud)rd2.png: $(HD)photo.jpeg $(HD).emacs.d/conf/cloud/pass.d/updated
\tconvert $< -encipher $(HD).emacs.d/conf/cloud/pass.d/rd2 $@
\t-@echo \"$$(date): uploaded $<\" >> $(localLog)
"))))))
#+END_SRC

** Meso scale
#+BEGIN_SRC emacs-lisp :tangle tests/meso.el :shebang ";; -*-  lexical-binding: t; -*-"
;; tests/meso.el
(ert-deftest read-write-conf()
   "testing cloud-init, read-conf, and write-conf"
(debug-environment (host> (car hostnames)
(let((tmp-conf(concat local/host/conf ".tmp")))
(debug-log-var tmp-conf)
(copy-file local/host/conf tmp-conf)
(debug-log-var file-1); file-1= ~/file-1.hostA
(clog :info "read-write-conf: tmp-conf => %s" tmp-conf)
(with-temp-buffer(insert-file-contents tmp-conf)
(clog :info "
Here is the auto-generated (by cloud.el) config file: ==>
%s <== end of config file
" (buffer-string)))
(letc nil
((remote-directory remote-directory); do not change this value
 (black-extensions '("abc" "def"))
 (black-root-dirs '("/trash/"))
 (remote/files  "XYZ")
 (password "myDogsName"))
(write-conf tmp-conf
  (make-conf remote-directory black-extensions black-root-dirs remote/files password)))
(with-temp-buffer(insert-file-contents tmp-conf)
(clog :info "
Here is my artificial config file: ==>
%s <== end of config file
" (buffer-string)))
(letc(read-conf-file tmp-conf)
(((:string) black-extensions) ((:string) black-root-dirs)
(:string remote/files) (:integer number-of-CPU-cores)
(:string password) (:string remote-directory))
(clog :debug "test read-write-conf> remote-directory=> %s, black-extensions=> %s" remote-directory black-extensions)
(should (equal black-extensions '("abc" "def")))
(should (equal black-root-dirs '("/trash/")))
(should (string= remote/files "XYZ"))
(should (string= password "myDogsName")))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle tests/meso.el
(ert-deftest cloud-init()
   "just check that a non-empty config file is created during the first run"
(debug-environment (host> (car hostnames)
(let((dir(untilde remote-directory)))
(should(string-prefix-p "/tmp/" dir))
;;(cloud-init)
(indices
(when-let((FR (cloud-get-file-properties local/host/conf))
          (FSize (aref (get-file-properties* local/host/conf) size)))
    (clog :info "deftest cloud-init: config file size = %d bytes,
and its content is
%s" FSize (cat-file local/host/conf))
  (should (< 50 FSize))))))))
#+END_SRC

*** uploading newly clouded file
#+BEGIN_SRC emacs-lisp :tangle tests/meso.el
(ert-deftest cloud-and-upload()
  "clouding a file and uploading it to remote directory"
(debug-environment (host> (car hostnames)
  ;;(cloud-init)
  (should(file-exists-p(untilde file-1)))
  (cloud-add file-1)
  (let((remote-files-1(directory-files remote-directory nil "...\...." t)))
    (clog :info "before syncying there are %d files in the remote directory: %s" (length remote-files-1) (together remote-files-1)); before syncying there are 0 files in the remote directory
    (cloud-sync)
    (let((remote-files-2(directory-files remote-directory nil "...\...." t)))
      (clog :info "after syncying there are %d files in the remote directory: %s" (length remote-files-2) (together remote-files-2))
      (should(< (length remote-files-1) (length remote-files-2)))
      (clog :info "will now cloud %s and sync" file-2)
      (should(file-exists-p(untilde file-2)))
      (cloud-add file-2)
      (cloud-sync)
(let((remote-files-3(directory-files remote-directory nil "...\...." t)))
  (clog :info "after syncying there are %d files in the remote directory: %s" (length remote-files-3) (together remote-files-3))
  (should(< (length remote-files-2) (length remote-files-3)))))))))
#+END_SRC

*** uploading previously clouded and later changed file
#+BEGIN_SRC emacs-lisp :tangle tests/meso.el
(defun file-mtime(FN &optional t0)
(when(file-exists-p FN)
(indices
  (round(float-time(time-subtract(aref(get-file-properties* FN) mtime) (or t0 '(0 0))))))))
#+END_SRC
The following test should be either rewritten or skipped:
#+BEGIN_SRC emacs-lisp :tangle tests/meso.el
(ert-deftest save-then-upload()
  "uploading previously updated file that was clouded before"
(skip-unless nil)
(debug-environment (host> (car hostnames)
;;(cloud-init)
(indices
(load (FN debug-make-dir "generated/functions.el"))
  (should(file-exists-p(untilde file-1a)))
  (cloud-add file-1a)
  (let((FR(cloud-locate-FN file-1a)))
    (should FR)
    (let((t0(aref FR mtime)) (CN(aref FR cipher)))
;;(clog :debug "t0= %d" t0)
      (should CN)
      (let((gpg-FN (concat remote-directory CN ".gpg")))
	(should(not(file-exists-p gpg-FN)))
	(sleep-for 1) (cloud-sync)
	(should(file-exists-p gpg-FN))
	(let((t1 (file-mtime gpg-FN t0))); all times are counted from t0
;;(clog :debug "t1= %d" t1)
	  (should(< 0 t1))
	  (clog :info "touch 'now + 5 sec' %s" file-1a) (set-file-times (untilde file-1a) (time-add (current-time) 5))
	  (sleep-for 1)
	  (cloud-touch (untilde file-1a)); as if we saved the changes to file-1a in emacs
	  (let((t2 (file-mtime file-1a t0)))
;;(clog :debug "t2= %d" t2)
	    (should(< t1 t2))
	    (cloud-sync)
	    (let((t3(file-mtime gpg-FN t0)))
;;(clog :debug "t3= %d" t3)
	      (should(< t1 t3))))))))))))
#+END_SRC

** Other meso-scale tests (to be written)
*** when ~/.emacs.d/conf/cloud/`hostname`/ is empty
... to be written ...
Generalize it: one of config files is missing.

*** What if local fileDB is missing?
... to be written ...
Then it must not be left empty, but downloaded from the cloud.

*** What if password is incorrect?
... to be written ...

** Macro scale
*** Manually clouding a file
Copying from hostA to hostB file that did not exist on hostB:
#+BEGIN_SRC emacs-lisp :tangle tests/macro-0.el
(ert-deftest cloud-sync-1()
"copying one file from hostA to hostB"
(debug-environment; ← defines variables: hostnames remote-directory remote/files password
(let(FN file-content)
(host> (car hostnames)
(clog :debug "checking that %s exists on host A:" (setf FN file-1))
(should (file-exists-p (untilde FN)))
(setf file-content (cat-file(untilde file-1)))
(cloud-start)
(cloud-add file-1)
(cloud-sync))
(clog :info "finished with host %s, switching to %s" (car hostnames) (cadr hostnames))
(host> (cadr hostnames)
(clog :debug "checking that %s DOES NOT exist on %s BEFORE SYNCING:" FN (cadr hostnames))
(should(not (file-exists-p (untilde FN))))
(cloud-start)
(should(file-exists-p (untilde FN))); so now file-1 exists on-hostB
(should(string= file-content (cat-file (untilde FN))))))))
#+END_SRC
Copying from hostA to hostB file that did exist on hostB:
#+BEGIN_SRC emacs-lisp :tangle tests/macro-0.el
(ert-deftest cloud-sync-2()
"copying one file from hostA to hostB"
(debug-environment
(let(file-content)
(host> (car hostnames)
  (setf file-content (cat-file (untilde file-1a)))
  (cloud-start)
  (clog :info "touch 'now + 5 sec' %s" file-1a) 
  (set-file-times (untilde file-1a) (time-add (current-time) 5))
  (cloud-add file-1a)
  (cloud-sync))
(host> (cadr hostnames)
  (should(file-exists-p (untilde file-1a)))
  (should(not(string= file-content (cat-file (untilde file-1a))))); files file-1a on two hostnames have the same name, but different content
  (cloud-start); cloud-start calls cloud-sync that has downloaded file-1a from remote directory
  (should(string= file-content (cat-file (untilde file-1a))))))))
#+END_SRC

*** Renaming
#+BEGIN_SRC emacs-lisp :tangle tests/macro-1.el
(require 'dired-aux)
(ert-deftest rename-file()
"renaming file on hostA leads to the same action on hostB"
(let(FN1 BN1 DN1 FN2)
(debug-environment
;; (clean-RD remote-directory) it is already in =debug-environment=!
(host> (car hostnames)
    (clog :info "initializing host %s before mirroring files and actions" localhost)
    (cloud-start))
(host> (cadr hostnames)
    (clog :info "initializing host %s before mirroring files and actions" localhost)
    (cloud-start))
(host> (car hostnames)
(debug-clouded-hosts hostnames); our (rename) action will only be performed on already clouded hosts
    (setf FN1 (tilde file-1a))
    (setf DN1 (file-name-directory FN1))
    (setf BN1 (file-name-nondirectory FN1))
    (should(file-exists-p (untilde file-1)))
    (setf FN2 (tilde (concat DN1 "new-" BN1)))
    (clog :info "FN1= %s BN1= %s, DN1= %s, FN2= %s" FN1 BN1 DN1 FN2)
;; :info 19:38:12 FN1= ~/dir-1a/ BN1= dir-1a/, DN1= ~/, FN2= ~/new-dir-1a/
    (should(= 0 (length (debug-remote-actions))))
    (dired-rename-file (tilde FN1) (tilde FN2) t)
    (should(= 1 (length (debug-remote-actions))))
    (clog :info "rename action: %s" (format-action(car(debug-remote-actions))))
    ;; → raw rename action: ...
    (cloud-sync))
(clog :info "finished with host %s, switching to %s" (car hostnames) (cadr hostnames))
(host> (cadr hostnames)
    (clog :info "file1= %s" file-1a)
    (should(file-exists-p (untilde file-1a)))
    (should(file-exists-p (untilde FN1)))
    (should(not(file-exists-p (untilde FN2))))
    (cloud-start)
    (should(file-exists-p (untilde FN2)))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle tests/macro-2.el
(ert-deftest rename-directory()
  "same as rename-file, but for directories"
(let(FN1 BN1 DN1 FN2)
(debug-environment 
;; (clean-RD remote-directory) it is already in =debug-environment=!
(host> (car hostnames)
    (clog :info "initializing host %s before mirroring files and actions" localhost)
    (cloud-start))
(host> (cadr hostnames)
    (clog :info "initializing host %s before mirroring files and actions" localhost)
    (cloud-start))
(host> (car hostnames)
(debug-clouded-hosts hostnames); our (rename) action will only be performed on already clouded hosts
    (setf FN1 (file-name-as-directory(tilde dir-1a)))
    (setf DN1 (file-name-directory(directory-file-name FN1)))
    (setf BN1 (file-name-as-directory(file-name-nondirectory(directory-file-name FN1))))
    (should(file-exists-p (untilde dir-1)))
    (setf FN2 (tilde(file-name-as-directory(concat DN1 "new-" BN1))))
    (clog :info "FN1= %s BN1= %s, DN1= %s, FN2= %s" FN1 BN1 DN1 FN2)
    (should(= 0 (length (debug-remote-actions))))
    (clog :debug "dired-rename-file %s --> %s" (directory-file-name(tilde FN1)) (directory-file-name(tilde FN2)))
    (dired-rename-file (directory-file-name(tilde FN1)) (directory-file-name(tilde FN2)) t)
    (should(= 1 (length (debug-remote-actions))))
    (clog :info "rename action: %s" (format-action(car(debug-remote-actions))))
    (cloud-sync))
(clog :info "finished with host %s, switching to %s" (car hostnames) (cadr hostnames))
(host> (cadr hostnames)
    (clog :info "file1= %s" dir-1a)
    (should(file-exists-p (untilde dir-1a)))
    (should(file-exists-p (untilde FN1)))
    (should(not(file-exists-p (untilde FN2))))
    (cloud-start)
    (should(file-exists-p (untilde FN2)))))))
#+END_SRC
