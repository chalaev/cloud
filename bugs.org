* Errors
** derive-version.el
I suspect that ~derive-version.el~ has incorrectly derived the version (1.5.12) from ~change-log.org~.
** .gz files
are uploaded, then clouded on another host, but are not downloaded there
** ghost actions
On one host I =cloud-forget= a file which was not clouded on another host (kalinin)
So there was nothing to do on kalinin, but the action did not disappear, it multiplicated itself instead, so
#+BEGIN_SRC emacs-lisp :results drawer
(mapcar #'format-action remote-actions)
#+END_SRC

#+RESULTS:
:RESULTS:
("2020-11-30 17:29:32 EST" 0 1 "/etc/backup2l.conf"  "kolmogorov"  
 "2020-11-30 17:29:32 EST" 0 1 "/etc/backup2l.conf"  "kolmogorov"  
 "2020-11-30 17:29:32 EST" 0 1 "/etc/backup2l.conf"  "kolmogorov" )
:END:

** (fixed 2020-11-30) ~/.dot-files
These should not be auto-clouded;
As well as files residing in ~/.dot-directories
** cloud-forget
1. (fixed 2020-11-25) Add firendly message ("sucessfully forgot")
2. Precaution: delete *all* file occurences in the contents
** rename
renameing a file to an existing (and already clouded) one reports an error:
:debug 16:46:11 DRF

** files generated by emacs
(for example, ~*.md~ written by =(org-md-export-to-markdown)= or  ~*.el~ written by =(org-babel-tangle)=) are automatically clouded.
** (fixed 2020-11-25) not following soft links
kolmogorov> tail -f /home/shalaev/.emacs.d/cloud/kolmogorov/log
11/25 07:27:54: downloaded ~/.emacs
kolmogorov> ls -lh ~/.emacs
lrwxrwxrwx 1 shalaev shalaev 33 сен  3 05:43 /home/shalaev/.emacs -> programming/emacs/main/kolmogorov
← desktop version was loaded onto laptop!

** (should have been fixed 2020-11-23) Double consecutive downloading:
kalinin 11:19:35> uploaded invoice.tex

kolmogorov 06:41:01> invoice.tex(11/03 19:43:15) is older than Vyc.gpg(11/21 19:23:30)
kolmogorov 06:41:01> downloaded invoice.tex

kolmogorov 11:12:15> detected NEW /mnt/lws/cloud/XYZ.gpg, will now update ~/.emacs.d/cloud/kolmogorov/all from it
kolmogorov 11:12:17> invoice.tex(11/03 19:43:15) is older than Vyc.gpg(11/21 19:23:30)
kolmogorov 11:12:20> downloaded invoice.tex

See files invoice.* in the following logs →

*** kalinin>
Wrote /mnt/lws/cloud/now-syncing/by

:info 11:19:33 detected NEW /mnt/lws/cloud/GWG.gpg, will now update ~/.emacs.d/cloud/kalinin/all from it
:debug 11:19:35 read-all/upload: local invoice.txt(11/21 19:23:30) is younger than LxO.gpg(11/03 19:50:04)
:debug 11:19:35 started upload(invoice.txt)
:debug 11:19:35 will indeed upload(invoice.txt)
:debug 11:19:35 read-all/upload: local invoice.tex(11/21 19:23:30) is younger than Vyc.gpg(11/03 19:43:15)
:debug 11:19:36 started upload(invoice.tex)
:debug 11:19:36 will indeed upload(invoice.tex)
Wrote /home/shalaev/.emacs.d/cloud/cloud.mk
:debug 11:19:37 starting make -j8 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
(Shell command succeeded with no output)
:debug 11:19:38 finished make -j8 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
:info 11:19:38 done syncing
Wrote /mnt/lws/cloud/history

*** kolmogorov>
:info 06:41:00 detected NEW /mnt/lws/cloud/XYZ.gpg, will now update ~/.emacs.d/cloud/kolmogorov/all from it
...
:debug 06:41:01 read-all/download: invoice.txt(11/03 19:50:04) is older than LxO.gpg(11/21 19:23:30)
:debug 06:41:01 read-all/download: invoice.tex(11/03 19:43:15) is older than Vyc.gpg(11/21 19:23:30)

Wrote /home/shalaev/.emacs.d/cloud/cloud.mk
:debug 06:41:02 starting make -j4 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
(Shell command succeeded with no output)
:debug 06:41:06 finished make -j4 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
:info 06:41:06 done syncing
Wrote /mnt/lws/cloud/history

Wrote /mnt/lws/cloud/now-syncing/by

:info 11:12:15 detected NEW /mnt/lws/cloud/XYZ.gpg, will now update ~/.emacs.d/cloud/kolmogorov/all from it
:debug 11:12:17 read-all/download: invoice.tex(11/03 19:43:15) is older than Vyc.gpg(11/21 19:23:30)
:debug 11:12:17 read-all/download: invoice.txt(11/03 19:50:04) is older than LxO.gpg(11/21 19:23:30)
...
Wrote /home/shalaev/.emacs.d/cloud/cloud.mk
:debug 11:12:18 starting make -j4 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
(Shell command succeeded with no output)
:debug 11:12:20 finished make -j4 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
:info 11:12:21 done syncing

** should have been fixed 2020-11-21 by rewriting "cloud-sync":

kalinin 10:26:01> upload cloud.org
kolmogorov 10:26:23> download cloud.org
kolmogorov 10:27> restart emacs

:debug 10:27:50 cloud-start: local/config = ~/.emacs.d/cloud/kolmogorov/config

:debug 10:27:50 read-conf(remote-directory)
:debug 10:27:50 read-conf(number-of-CPU-cores)
:debug 10:27:50 read-conf(password)
:debug 10:27:50 read-conf(remote/files)
:debug 10:27:50 done with read-conf

:debug 10:27:50 started update-conf
:debug 10:27:50 ended update-conf

:info 10:27:50 loading data from disk at start

:debug 10:27:51 read-all/upload: local ~/Private/work/cloud/cloud.org(11/21 10:25:55) is younger than Kq2(11/21 10:03:46)
:debug 10:27:51 started upload(~/Private/work/cloud/cloud.org)
:debug 10:27:51 will indeed upload(~/Private/work/cloud/cloud.org)

:debug 10:27:51 started upload(~/Private/work/cloud/generated/main.el)
:debug 10:27:51 will indeed upload(~/Private/work/cloud/generated/main.el)

Wrote /mnt/lws/cloud/now-syncing/by
Wrote /home/shalaev/.emacs.d/cloud/cloud.mk
:debug 10:27:54 starting make -j4 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
(Shell command succeeded with no output)
:debug 10:27:55 finished make -j4 -f ~/.emacs.d/cloud/cloud.mk all &> ~/.emacs.d/cloud/cloud.mk.log
:info 10:27:55 done syncing
Wrote /mnt/lws/cloud/history
Starting Emacs daemon.

* Tests
** Stranger test
Someone slightly attracted by the project name must be happy that everything works out of the box.

* To do
1. Files should be unclouded after, say, 30 days of being not updated. For such files, regular daily backup is enough.
2. Tired project
3. Garbage cleaning: some of the files in the remote directory are not referenced in =~/.emacs.d/cloud/`hostname`/all=;
   Such "abandoned" files were created during debugging; they should be identified and erased. Similarly, some of the lines in =~/.emacs.d/cloud/individual.passes= are unused
   and should be removed.
4. Package the code.
     
* Ideas on future development

~JPEGs~ and ~PNGs~ are encrypted with AES-algorithm that [[https://imagemagick.org/script/cipher.php][may become vulnerable]] if the same password is used for multiple images; this is why every image gets an individual password.

I did not expect this project to grow that much;
some of the desired functions are still not implemented or half-implemented.

** Replace clouds with torrents? 
[[http://lftp.yar.ru][lftp]] supports torrents.

I will think of using torrents instead of clouds or using them together.

(At least when mounted using ~WebDav~) clouds are probably *even slowlier* than torrents for large files:
for example, it took me 13+ hours (!) to copy 403-megabyte archive to [[https://disk.yandex.com/][Yandex Disk]].
(This is not an exception – I am used to the fact that ~WebDav~-clouds are very slow.)

I did not use torrents for looong time but I think they we faster even 10 years ago.

Advantages of torrents:
1. With torrents we can forget about space limitation we always have for clouds, and
2. The more people use torrents, the harder it is to enforce [[https://www.fsf.org/search?SearchableText=DMCA][DMCA]]; probably 50 million of torrent users in the US
   would be enough to make it meaningless and powerless piece of paper.

Recently there was also a [[https://www.youtube.com/watch?v=AD9kEESRfg0][video]] about [[https://freenetproject.org/pages/documentation.html][freenet]] which is probably even better than torrents.

** Permutate image blocks
For every clouded image file, we create a sub-directory in the remote directory.
This sub-directory will contain NxM small pieces (icons) of the image, where N,M≥12.
Most of these pieces will be equally sized rectangulars, combined together into the inner part of the image.
Others will be parts of the thin frame.
On the one hand, N and M can not be to small; on the other hand each inner rectangular image should not be too small
– at least 50x40 pixels – so that JPEG (or another) image compression algorithm remains efficient.
This kind of protection is probably ok to protect innocent photos from face recognition robots.
And in case someone writes an algorithm trying to guess the correct icons' position, 
creating obstacles for it (so that decryption of a single photo would take at least an hour) seems easy.

** Other ideas
1. ~convert~ runs without parameters (e.g., controlling jpeg quality) for now. Thus, for example,
   a low-quality ~JPEG~ file may be grow about 3 times larger after it was encrypted and then decrypted back.
