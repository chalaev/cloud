* Errors
1. Suppose I am starting =emacs --daemon= and the remote directory is *not* mounted.
   (Either because I forgot to mount it, or there is no wifi available.)
   Then I could =M-x cloud-add= and =M-x cloud-forget=, delete and rename files and direcories in dired, but this all woun't be
   synced?
   *The clouding system should work even if there is no connection to the cloud.*
   2020-10-30 Experimenting with that with my laptop in doctor's office (without internet):
   1. changed (previously clouded) bugs.org
   2. clouded 2-task.txt
   When I came to my office, both files were sucessfully sent to the cloud, but on the desktop there was a disaster:
   1. 2-task.txt
      :debug 09:44:26 started read-fileDB*
      :error 09:44:28 forgetting file ~/2-task.txt which is marked as clouded but is neither on local disk nor in the cloud
      :error 09:44:28 forgetting file ~/programming/emacs/common.el which is marked as clouded but is neither on local disk nor in the cloud
      ← that is, ~/2-task.txt was erased from the cloud!
   2. bugs.org was never copied; its stanza in cloud make was the opposite, for uploading, not for downloading.
2. Now suppose I run out of battery and I will shut down the laptop before I reach the internet.
   What is going to be lost? I guess, 2-task.txt will not be clouded.
   This problem could be fixed by adding ~pending-actions~ file to the directory ~/.emacs.d/cloud/
3. Newly added image ~/03.jpg was added to =file-DB= and saved to ~/.emacs.d/cloud/CCN and got a line in individual.passes *but*
   was not saved to cloud.mk and was not uploaded.

* To do
1. (see above) add ~pending-actions~ file to the directory ~/.emacs.d/cloud/
2. Tired project
3. Clouding directories
4. Package the code.
     
* Tests
** Clouding new text file and new image
1. Mark one image and one text file in dired, then =M-x cloud-add=.
2. =M-x cloud-sync= must encrypt these and upload them to the cloud.
3. (Re)start emacs on another computer, these two files must be downloaded from the cloud.

** Fresh start
1. Rename directory =~/.emacs.d/cloud/=
2. Disconnect (unmount) remote directory.
3. (Re)start emacs.
4. Examine newly created =~/.emacs.d/cloud/config=
5. Examine ~*Messages*~ buffer for error message(s) explaining that the code can not work until you connect to the server.

* Ideas on future development
** Replace clouds with torrents? 
[[http://lftp.yar.ru][lftp]] supports torrents.

I will think of using torrents instead of clouds or using them together.
Advantages of torrents:
1. With torrents we can forget about space limitation we always have for clouds, and
2. The more people use torrents, the harder it is to enforce [[https://www.fsf.org/search?SearchableText=DMCA][DMCA]]; probably 50 million of torrent users in the US
   would be enough to make it meaningless and powerless piece of paper.
** Permutate image blocks
For every clouded image file, we create a sub-directory in the remote directory.
This sub-directory will contain NxM small pieces (icons) of the image, where N,M≥12.
Most of these pieces will be equally sized rectangulars, combined together into the inner part of the image.
Others will be parts of the thin frame.
On the one hand, N and M can not be to small; on the other hand each inner rectangular image should not be too small
– at least 50x40 pixels – so that JPEG (or another) image compression algorithm remains efficient.
This kind of protection is probably ok to protect innocent photos from face recognition robots.
And in case someone writes an algorithm trying to guess the correct icons' position, 
creating obstacles for it (so that decryption of a single photo would take at least an hour) seems easy.

** Special JPEG treatment
I assume that JPEG images are most probably photos and that most of them contain people's faces.

*I had to postpone this idea* because both 
(face recognition program) [[https://www.thregr.org/~wavexx/software/facedetect/][facedetect]] and
(face distorting program) [[https://sandlab.cs.uchicago.edu/fawkes/][fawkes]] are very unreliable.

*** striking them back
Let us think of how could we damage the business of face-recognizers.
1. At the very least least we can replace real faces on our photos with pictures of inexisting people generated (for example) by https://thispersondoesnotexist.com ; all this should be
   done in a make file.
2. Or even better, it is possible to to distort these faces of inexisting people in such a way that AI face recognition algorithms will be damaged (basically, they will learn
   the wrong way of faces recognition). Unfortunately, the code https://sandlab.cs.uchicago.edu/fawkes/ is very unstable for now: it worked only once for me and I've tried a lot!

*** The algorithm
So at first we run ~facedetect~ to detect if there are any faces on the image.
If there are no faces, we just [[permutate image blocks]].

If there are faces, we examine their sizes provided by ~facedetect~.
Ideally the size of rectangulars for permutation would be just equal to the largest face detected by ~facedetect~.
Then we encrypt real faces using AES algorithm and put fake ones instead of them.

** Other ideas
1. ~convert~ runs without parameters (e.g., controlling jpeg quality) for now. Thus, for example,
   a low-quality ~JPEG~ file may be grow about 3 times larger after it was encrypted and then decrypted back.
