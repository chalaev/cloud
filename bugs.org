* Errors

* To do
1. Tired project
2. Clouding directories
3. Garbage cleaning: some of the files in the remote directory are not referenced in =~/.emacs.d/cloud/`hostname`/all=;
   Such "abandoned" files were created during debugging; they should be identified and erased. Similarly, some of the lines in =~/.emacs.d/cloud/individual.passes= are unused
   and should be removed.
4. Package the code.
     
* Ideas on future development

~JPEGs~ and ~PNGs~ are encrypted with AES-algorithm that [[https://imagemagick.org/script/cipher.php][may become vulnerable]] if the same password is used for multiple images; this is why every image gets an individual password.

I did not expect this project to grow that much;
some of the desired functions are still not implemented or half-implemented.


** Replace clouds with torrents? 
[[http://lftp.yar.ru][lftp]] supports torrents.

I will think of using torrents instead of clouds or using them together.
Note that (at least when mounted using ~WebDav~) clouds are probably *even slowlier* than torrents for large files:
for example, it took me 13+ hours (!) to copy 403-megabyte archive to [[https://disk.yandex.com/][Yandex Disk]].
(This is not an exception – I am used to the fact that ~WebDav~-clouds are very slow.)
I did not use torrents for looong time but I think they we faster even 10 years ago.

Advantages of torrents:
1. With torrents we can forget about space limitation we always have for clouds, and
2. The more people use torrents, the harder it is to enforce [[https://www.fsf.org/search?SearchableText=DMCA][DMCA]]; probably 50 million of torrent users in the US
   would be enough to make it meaningless and powerless piece of paper.
** Permutate image blocks
For every clouded image file, we create a sub-directory in the remote directory.
This sub-directory will contain NxM small pieces (icons) of the image, where N,M≥12.
Most of these pieces will be equally sized rectangulars, combined together into the inner part of the image.
Others will be parts of the thin frame.
On the one hand, N and M can not be to small; on the other hand each inner rectangular image should not be too small
– at least 50x40 pixels – so that JPEG (or another) image compression algorithm remains efficient.
This kind of protection is probably ok to protect innocent photos from face recognition robots.
And in case someone writes an algorithm trying to guess the correct icons' position, 
creating obstacles for it (so that decryption of a single photo would take at least an hour) seems easy.

** Other ideas
1. ~convert~ runs without parameters (e.g., controlling jpeg quality) for now. Thus, for example,
   a low-quality ~JPEG~ file may be grow about 3 times larger after it was encrypted and then decrypted back.
