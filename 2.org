#+BEGIN_SRC emacs-lisp :tangle generated/2.el :shebang ";; -*-  lexical-binding: t; -*-"
(defun get-file-properties* (FN)
(when FN
  (or (cloud-locate-FN FN) (cloud-get-file-properties(file-chase-links FN)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defun cip-ext (FN)
"extension of encrypted file based on the original name"
(case* (file-name-extension FN) string=
       ("jpeg" ".png")
       ("jpg" ".png")
       (otherwise ".gpg")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defun forget-password(XYZ)
  "removes image password from password file"
(let* ((str (progn
	     (find-file (image-passes))
	     (buffer-string)))
       (BN (buffer-name)))
  (with-temp-file (image-passes)
    (insert (replace-regexp-in-string (format "%s .*
" XYZ) "" str)))
  (kill-buffer BN)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defmacro bad-column (cType N &optional str)
(if str
`(clog :error "invalid %dth column in %s line = %s" ,N ,cType ,str)
`(clog :error "invalid %dth column in %s line" ,N ,cType)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defun gpg-encrypt(FN XYZ)
(= 0 (shell-command
  (format "gpg --batch --yes --pinentry-mode loopback --passphrase %S -o %s --symmetric %s" password (concat (remote-directory) XYZ ".gpg") (untilde FN)))))

(defun gpg-decrypt(FN XYZ)
(= 0 (shell-command 
(format "gpg --batch --yes --pinentry-mode loopback --passphrase %S -o %s --decrypt %s" password (untilde FN) (concat (remote-directory) XYZ ".gpg")))))
#+END_SRC
← foreground (en/de)cryption. Probably I should have merged it with the =Makefile= and make background.
← returns usual (standard for me) structure =(successP . more-details)=
← should I replace everywhere =shell-command= → =start-process= or =call-process= (see [[file:learn.org][learn.org]])?

In =time<= I have to add 3 seconds of time to avoid chatter effects:
if at some moment the files are synchronized between the host and the cloud,
this situation might change due to time-desynchronization.
#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defun time< (t1 t2)
  (and
    (time-less-p (time-add t1 3) t2)
    (not (time-less-p (time-add t2 3) t1))))
#+END_SRC
This problem demonstrates the importance of the time synchronization (via =ntpdate= or an =ntp= server);
however, it is not too serious because it just results in useless downloading or uploading,
with replacement of files with their exact copies. This should not result in data loss.

Not that important, still handy function replacing file extension:
#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defun replace-file-ext(FN new-ext)
  "replacing file extension"
  (concat (file-name-sans-extension FN) "." new-ext))
#+END_SRC

Choosing the youngest (most recently updated) file out of the list:
#+BEGIN_SRC emacs-lisp :tangle generated/2.el
(defun youngest(&rest FNs)
  (car (sort FNs #'file-newer-than-file-p)))
#+END_SRC
