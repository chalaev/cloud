Intended for linux users who have [[https://www.gnu.org/software/emacs/][emacs]] always open.

I did not expect this project to grow that much;
some of the desired functions are not implemented or half-implemented.

* Description
Synchronizing important text files between two or more computers using
1. emacs + GNU make,
2. some sort of a cloud that can be mounted to a directory, for example, an
   a. ssh-server, or
   b. some public cloud service (e.g., Russian [[https://disk.yandex.com/][Yandex Disk]] or Swiss [[https://www.pcloud.com][pCloud]]) that can be mounted in linux
      using standard open-source utilities,
   and
3. symmetric encryption with [[https://www.gnupg.org/][gpg]].

The ~.gpg~ files saved in the cloud have randomly generated names to minimize the amount of information Evil Corporations can extract by monitoring your cloud directory.

* Quick start
1. Mount remote directory. The mounting point may be arbitrary (can be changed in =~/.emacs.d/cloud/config=), the default one is ~/mnt/cloud/~.
2. You can create the file =~/.emacs.d/cloud/config= yourself, or it will be generated. Mine looks as follows:
   #+BEGIN_SRC
   delete-contents=yes
   contents-name=XYZ
   password=*********
   number-of-CPU-cores=8
   cloud-directory=/mnt/lws/cloud/
   #+END_SRC
3. Evaluate ~cloud.el~ at start by placing the following lines
   #+BEGIN_SRC emacs-lisp
   (mapcar #'require '(cl dired-aux timezone diary-lib subr-x))
   (load-file "/path-to/cloud.el")
   (switch-to-buffer "*Messages*")
   (cloud-start)
   #+END_SRC
   into your =~/.emacs= file. (Later the code will be transformed into package.)
   Then open a directory =C-x d=, mark several files, and cloud them =M-x cloud-add=. Then =M-x cloud-sync=.
4. Open dired: =C-x d=. Mark files you want to cloud (synchronize), and =M-x cloud-add=.
5. Every time we =M-x cloud-sync=, local files get synchronized with the cloud. For this purpose I have a line in my ~crontab~:
   =40 9-21 * * * emacsclient -e "(cloud-sync)" &> /dev/null=

* Files
1. ~README.org~ is README for [[https://github.com/chalaev/cloud][github]].
2. ~cloud.org~ contains the code from ~generated/main.el~ together with explanations.
3. ~Makefile~ merges all the code into ~generated/cloud.el~ which is the main file to be launched when ~emacs~ starts.
4. ~0.el~, ~1.el~, and ~2.el~ contain some pieces of code which are too dull to be included in ~cloud.org~.
5. ~goodies/{macros,functions,logging.el}~ are generated in [[https://github.com/chalaev/elisp-goodies/blob/master/goodies.org][goodies.org]] from the [[https://github.com/chalaev/elisp-goodies][elisp-goodies]] project.
6. =/mnt/cloud/history=, =~/.emacs.d/cloud/hostname.log=, and =~/.emacs.d/elisp.log= are log files described in  ~log-files.org~.

* Motivation
I like cloud file storages: they are cheap (or even free) and reliable.

However, Evil Corporations and governments are trying to spy on people using the information
that they extract from private data stored in the cloud.

Most of my important files (for example, emails or document scans) are not regularly changed;
for those I use [[https://github.com/gkiefer/backup2l][backup2l]] with gpg encryption, and store encrypted archives
using one of cloud services that allow ~WebDav~ access to the storage directory (Russian [[https://disk.yandex.com/][Yandex Disk]] or Swiss [[https://www.pcloud.com][pCloud]]).

This does not work so well for regularly changed files.
Since emacs is my only text editor, it is enough to write eLisp code that
1. Saves unencrypted file locally and its encrypted copy in the cloud.
2. Every file in =dired= buffer can be "clouded" (=M-x cloud-add=).
3. Encrypted files are stored under randomly generated names and modification dates/times.
4. Remotely stored files are periodically syncronized with the local ones.
5. Dired-compatible: whatever I do with a file in dired (delete, rename), will be automatically done on other computers.

* Limitations
After I've started using [[https://www.gnu.org/software/make/][GNU make]] for multithreading, only nicely named files are allowed.
So no spaces in file names for now.
Later I am going to circumvent this limitation by creating soft links to badly named files.

* Support
You can support this project by sending
1. comments and questions to [[mailto:oleg@chalaev.com][oleg@chalaev.com]] and
2. donations via [[https://liberapay.com/shalaev/donate][liberapay]] or [[https://www.paypal.com/paypalme/chalaev][paypal]].
